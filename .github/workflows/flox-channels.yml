name: "Flox channel progression"


on:
  workflow_dispatch:
  schedule:
    # * is a special character in YAML so you have to quote this string
    # Run script every day at 8 UTC
    - cron:  '01 8 * * *'


jobs:

  update-guard:
    runs-on: ubuntu-latest
    outputs:
      run: ${{steps.guard.outputs.run}}
    steps:
      - name: Check whether to update
        id: guard
        run: |
          # We previously only ran on certain days of the week, but now
          # run every day. Keeping this guard statement as a placeholder
          # in case we should want to reinstate similar logic in future.
          echo "run=true" >> $GITHUB_OUTPUT

  flox-channels:
    needs: [update-guard]
    if: github.repository_owner == 'flox' && fromJSON(needs.update-guard.outputs.run)
    env:
      GH_TOKEN: ${{ secrets.GIT_TOKEN }}

    runs-on: ubuntu-latest

    # TODO: implement configurable merge based on matrix

    name: "Periodic pull from upstream"
    steps:
      - name: Configure Git Env
        run: |
          # gh automatically sets the `upstream` remote to github:NixOS/nixpkgs
          gh repo clone flox/nixpkgs ./
          gh auth setup-git

          git config user.email "technology@floxdev.com"
          git config user.name "Flox Nixpkgs Updater"
          git config checkout.defaultRemote origin

          # gh configures the `upstream` repo to only contain the current branch, reconfigure to fetch all
          git remote set-branches upstream '*'
          git fetch upstream

      - name: run update routine
        run: |
          set -e

          # Today's date in YYYYMMDD format.
          today=$(date +%Y%m%d)
          # Running list of tags to be pushed.
          tags=""
          branches=""

          function reset_and_tag_branch() {
              local $from_branch=$1; shift
              local $to_branch=$1; shift
              echo "::group::reset ${from_branch}->${to_branch}"
              # Discern the "snapshot date" by inspecting the expected stability
              # tag pointing to the "from" branch.
              local tag_date="$(git tag --points-at origin/${from_branch} | awk -F. '$1 == "'${from_branch}'" {print $2; exit}')"
              git checkout "${to_branch}"
              git reset --hard "origin/${from_branch}"
              git tag "${to_branch}.${tag_date}"
              tags="$tags ${to_branch}.${tag_date}"
              branches="$branches ${to_branch}"
              echo "::notice title=Promote Stable::Scheduled update of '${to_branch}' channel (${from_branch}->${to_branch})"
              echo "::endgroup::"
          }

          # Day of week (1..7)
          dow=$(date +%u)
          if [ $dow -eq 6 ]
          then
              # Day of month (01..31)
              dom=$(date +%e)
              if [ $dom -le 7 ]
              then
                  # Month of year (01..12)
                  moy=$(date +%m)
                  if [ $moy -eq 1 -o $moy -eq 7 ]
                  then
                      # On first Saturday of January and July, reset stable->lts.
                      reset_and_tag_branch stable lts
                  fi
                  # On first Saturday of the month, reset staging->stable.
                  reset_and_tag_branch staging stable
              fi
              # Every Saturday, reset unstable->staging.
              reset_and_tag_branch unstable staging
          fi

          # Every day: rebase latest changes from upstream to unstable branch.
          echo "::group::rebase against upstream"
          git checkout unstable
          git rebase upstream/nixos-unstable
          git tag unstable.$today
          tags="$tags unstable.$today"
          branches="$branches unstable"
          echo "::notice title=Promote Unstable::Scheduled update of 'unstable' channel (rebase onto nixpkgs/nixos-unstable)"
          echo "::endgroup::"

          echo "::notice title=Summary::New tags: $tags\nUpdates Branch(es): $branches"

          git push origin -f --atomic $branches $tags

      - name: Comment on failure
        uses: peter-evans/create-or-update-comment@v2
        if: ${{ failure() }}
        with:
          repository: flox/product
          issue-number: 272
          token: ${{ secrets.NIX_GIT_TOKEN }}
          body: |
            Periodic update has [failed](https://github.com/flox/nixpkgs-flox/actions/runs/${{ github.run_id }}).

            @flox/internal
